/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\n    // alert('hello!!!');\n    // console.log('this should print in the console!')\n    // debugger\n\n    const width = 720,\n        height = 500;\n\n    const projection = d3.geoAlbersUsa()\n        .scale(1000)\n        .translate([width / 2, height / 2]);\n\n    const path = d3.geoPath()\n        .projection(projection);\n\n    let svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n\n    let color = d3.scaleThreshold()\n        .domain([0, 0.15, 0.30, 0.45, 0.55, 0.70, 0.85, 1.0])\n        .range([\"lightgray\", \"#009392\", \"#39B185\", \"#9CCB86\", \"#E9E29C\", \"#EEB479\", \"#E88471\", \"#CF597E\"]); // color scheme 1 (green-red)\n        // .range([\"lightgray\", \"#228B3B\", \"#6CBA7D\", \"#CDE5D2\", \"#FCE1A4\", \"#FABF7B\", \"#E05C5C\", \"#AB1866\"]); // color scheme 2 (green-magenta)\n        // .range([\"lightgray\", \"#3C93C2\", \"#6CB0D6\", \"#9EC9E2\", \"#E1F2E3\", \"#FEB24C\", \"#FD8D3C\", \"#FC4E2A\"]); // color scheme 3 (blue-orange)\n\n    d3.json(\"assets/data/cb_2018_us_state_5m.json\").then(us => {\n\n        // Note: I should prob refactor the below line later to interpolate the food comparison into the filepath\n        // d3.csv(\"assets/data/sriracha_tabasco_timeline_2004_to_present.csv\").then(hotsauceTimelineData => {\n        // d3.csv(\"assets/data/sriracha/sriracha_tabasco_geomap_2006.csv\").then(hotsauceGeoData2006 => {\n        d3.csv(\"assets/data/sriracha/sriracha_vs_tabasco_geo_trended.csv\").then(data => {\n            // console.log(us);\n            // console.log(us.objects.cb_2018_us_state_5m);\n            // console.log(topojson.feature(us, us.objects.cb_2018_us_state_5m));\n            // console.log(data);\n            // console.log(data[0]);\n            // console.log(data[data.length - 1]);\n            // console.log(getSrirachaSearchFreqByState(data, \"2013\"));\n            // console.log(data);\n            // console.log(filteredData);\n            // console.log(srirachaSearchFreqByState);\n\n\n            // const filteredData = data.filter(datum => datum.year === \"2006\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2007\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2008\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2009\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2010\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2011\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2012\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2013\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2014\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2015\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2016\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2017\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            // const filteredData = data.filter(datum => datum.year === \"2018\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            const filteredData = data.filter(datum => datum.year === \"2019\"); // the year is hardcoded right now --> need to use a year variable that will get passed in from outside\n            let srirachaSearchFreqByState = {};\n            filteredData.forEach(datum => {\n                if (datum.sriracha === \"0\" && datum.tabasco === \"0\") {\n                    srirachaSearchFreqByState[datum.Region] = -0.2; // or should it be 0.5?\n                } else {\n                    srirachaSearchFreqByState[datum.Region] = parseFloat(datum.sriracha);\n                }\n            });\n\n            svg.append(\"g\")\n                .attr(\"class\", \"states\")\n                .selectAll(\"path\")\n                .data(topojson.feature(us, us.objects.cb_2018_us_state_5m).features)\n                .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                // .style(\"fill\", \"#1a6b1a\");  // ultimately, we want to fill the color dynamically\n                .style(\"fill\", d => {\n                    let searchFreq = srirachaSearchFreqByState[d.properties.NAME];\n                    // console.log(d);\n                    // console.log(d.properties.NAME);\n                    return color(searchFreq);\n                    // return \"purple\";\n                });\n\n        });\n    });\n\n\n    // IMPORTANT NOTE: RIGHT NOW, THIS IS CODE I WROTE FOR A TUTORIAL, AS PROOF OF CONCEPT\n    // NOT MY OWN PROJECT CODE (but I didn't just copy / paste)\n    // Tutorial source: http://duspviz.mit.edu/d3-workshop/mapping-data-with-d3/\n\n    // TUTORIAL CODE\n    // d3.json(\"assets/data/us.json\").then(us => {\n    //     d3.tsv(\"assets/data/us_unemployment_2008.tsv\").then(unemployment => {   // load real Google trends data here\n    //         console.log(us.objects.states);\n    //         console.log(unemployment);\n\n    //         let rateById = {};  // empty object to hold dataset\n    //         unemployment.forEach(d => {\n    //             rateById[d.id] = d.rate;    // populate object with each county's rate (retrieve and set at a key of each county's id)\n    //         });\n    //         // console.log(rateById);\n\n    //         svg.append(\"g\")\n    //             .attr(\"class\", \"states\")\n    //             .selectAll(\"path\")\n    //             .data(topojson.feature(us, us.objects.states).features) // Bind TopoJSON data elements\n    //             .enter().append(\"path\")\n    //             .attr(\"d\", path)\n    //             // .style(\"fill\", d => {\n    //             //     let rateValue = rateById[d.id]; // get unemployment rate for the given data point (match by id)\n    //             //     return color(rateValue);    // pass unemployment rate into color function (defined below) to get the correct fill color\n    //             // });\n    //             .style(\"fill\", \"#008080\");\n    //     });\n\n    //     let color = d3.scaleThreshold()\n    //         .domain([0.02, 0.04, 0.06, 0.08, 0.10])\n    //         .range([\"#F0F0F0\", \"#b2d8d8\", \"#66b2b2\", \"#008080\", \"#006666\", \"#004c4c\"]);\n    //         // .range([\"#f2f0f7\", \"#dadaeb\", \"#bcbddc\", \"#9e9ac8\", \"#756bb1\", \"#54278f\"]);  // different color palette\n    // });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ });