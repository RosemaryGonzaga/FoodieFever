/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/geomap.js":
/*!***********************!*\
  !*** ./src/geomap.js ***!
  \***********************/
/*! exports provided: renderGeoMap, colorGeoMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderGeoMap\", function() { return renderGeoMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"colorGeoMap\", function() { return colorGeoMap; });\nconst geoColor = d3.scaleThreshold()\n    .domain([0, 0.15, 0.30, 0.45, 0.55, 0.70, 0.85, 1.0])\n    .range([\"lightgray\", \"#009392\", \"#39B185\", \"#9CCB86\", \"#E9E29C\", \"#EEB479\", \"#E88471\", \"#CF597E\"]); // color scheme 1 (green-red)\n    // .range([\"lightgray\", \"#228B3B\", \"#6CBA7D\", \"#CDE5D2\", \"#FCE1A4\", \"#FABF7B\", \"#E05C5C\", \"#AB1866\"]); // color scheme 2 (green-magenta)\n    // .range([\"lightgray\", \"#3C93C2\", \"#6CB0D6\", \"#9EC9E2\", \"#E1F2E3\", \"#FEB24C\", \"#FD8D3C\", \"#FC4E2A\"]); // color scheme 3 (blue-orange)\n\nconst renderGeoMap = (year = \"2006\") => { // later, this should take in a dataset too\n    const width = 720;\n    const height = 500;\n\n    const projection = d3.geoAlbersUsa()\n        .scale(1000)\n        .translate([width / 2, height / 2]);\n\n    const path = d3.geoPath()\n        .projection(projection);\n\n    let svg = d3.select(\".geomap-container\").append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n\n    d3.json(\"assets/data/cb_2018_us_state_5m.json\").then(us => {\n\n        // // Note: I should prob refactor the below line later to interpolate the food comparison into the filepath\n        // d3.csv(\"assets/data/sriracha/sriracha_vs_tabasco_geo_trended.csv\").then(data => {\n\n        //     const filteredData = data.filter(datum => datum.year === year); // refactored to match a variable year, which should come in as a string\n        //     let searchFreqByState = {};\n        //     filteredData.forEach(datum => {\n        //         if (datum.sriracha === \"0\" && datum.tabasco === \"0\") {\n        //             searchFreqByState[datum.Region] = -0.2;\n        //         } else {\n        //             searchFreqByState[datum.Region] = parseFloat(datum.sriracha);\n        //         }\n        //     });\n\n            svg.append(\"g\")\n                .selectAll(\"path\")\n                .data(topojson.feature(us, us.objects.cb_2018_us_state_5m).features)\n                .enter()\n                .append(\"path\")\n                .attr(\"d\", path)\n                .attr(\"class\", \"states\")\n                .style(\"fill\", \"lightgray\");\n                // .style(\"fill\", d => {\n                //     // debugger\n                //     let searchFreq = searchFreqByState[d.properties.NAME];\n                //     return geoColor(searchFreq);\n                // });\n\n            colorGeoMap();\n        });\n    // });\n}\n\nconst colorGeoMap = (year = \"2006\") => {\n\n    // Note: I should prob refactor the below line later to interpolate the food comparison into the filepath\n    d3.csv(\"assets/data/sriracha/sriracha_vs_tabasco_geo_trended.csv\").then(data => {\n        // debugger\n        const filteredData = data.filter(datum => datum.year === year); // refactored to match a variable year, which should come in as a string\n        let searchFreqByState = {};\n        filteredData.forEach(datum => {\n            if (datum.sriracha === \"0\" && datum.tabasco === \"0\") {\n                searchFreqByState[datum.Region] = -0.2;\n            } else {\n                searchFreqByState[datum.Region] = parseFloat(datum.sriracha);\n            }\n        });\n        // debugger\n\n        d3.selectAll(\".states\")\n            // .style(\"fill\", \"red\");\n            // .attr(\"fill\", d => {\n            //     debugger\n            //     let searchFreq = searchFreqByState[d.properties.NAME];\n            //     return geoColor(searchFreq);\n            // });\n\n            .style(\"fill\", d => {\n                // debugger\n                let searchFreq = searchFreqByState[d.properties.NAME];\n                return geoColor(searchFreq);\n            });\n    });\n}\n\n\n\n\n\n\n\n\n\n    // TUTORIAL CODE\n    // Global variables to store slider state and \"dictionary\" (or reference values for input)\n    // var inputValue = null;\n    // var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    // // Dimensions of visualization (svg)\n    // let width = 700;\n    // let height = 580;\n\n    // // Create SVG canvas (add svg to DOM)\n    // let svg = d3.select('body')\n    //     .append('svg')\n    //     .attr('width', width)\n    //     .attr('height', height);\n\n    // // MAP *****************************************************************\n\n    // // RODENT DATA *****************************************************************\n    // let rodents = svg.append('g')\n    // rodents.selectAll('path')\n    //     .data(rodents_json.features)    // how does d3's .features method know to extract the coordinates?\n    //     .enter()\n    //     .append('path')\n    //     .attr('fill', initialDate)\n    //     .attr('stroke', '#999')\n    //     .attr('d', geoPath)    // position the dots based on the geoPath function?\n    //     .attr('class', 'incident') // add class to each data point (dot) so it can be styled with css (defined in head)\n    //     // .on('mouseover', d => {      // NOTE: using a fat arrow function yields this error: this.setAttribute is not a function (b/c it binds this?)\n    //     //     d3.select('h2').text(d.properties.LOCATION_STREET_NAME);\n    //     //     d3.select(this).attr('class', 'incident hover');\n    //     // })\n    //     // .on('mouseout', d => {\n    //     //     d3.select('h2').text('');\n    //     //     d3.select(this).attr('class', 'incident');\n    //     // });\n    //     // EVENT LISTENERS FOR INTERACTIVITY (HOVER)\n    //     .on('mouseover', function (d) {\n    //         d3.select('h2').text(d.properties.LOCATION_STREET_NAME);\n    //         d3.select(this).attr('class', 'incident hover');\n    //     })\n    //     .on('mouseout', function (d) {\n    //         d3.select('h2').text('');\n    //         d3.select(this).attr('class', 'incident');\n    //     });\n\n\n    // // EVENT LISTNERS FOR INTERACTIVITY (TIME SLIDER) ******************************************\n    // // Each event listener takes in a callback that's subsequently defined below\n\n    // // When input range changes, update value\n    // d3.select('#timeslide').on('input', function () {     // TEST: will a big arrow function break this? YES (value is undefined)\n    //     update(+this.value);    // what is the '+' for??? code seems to function well without it...\n    // });\n\n    // // Update the fill of each SVG element of class \"incident\" with value\n    // function update(value) {    // TEST: will a big arrow function break this? maybe b/c of hoisting and/or context binding?\n    //     document.getElementById('range').innerHTML = month[value];   // set the month by indexing into month array at an index of the range's value\n    //     inputValue = month[value];  // update global var\n    //     d3.selectAll('.incident')\n    //         .attr('fill', dateMatch);   // yet to define dateMatch, a fct that will check the inputValue for a match w/ data and return a color if there's a match\n    // }\n\n    // // Function to return a color for data point (based on color match status)\n    // function dateMatch(data, value) {   // why do we need to take in a value parameter if it never gets used? Code works ok without it\n    //     let d = new Date(data.properties.OPEN_DT);  // create a JS Date object using the data\n    //     let m = month[d.getMonth()];    // get month using Date method\n    //     if (inputValue === m) {     // check for match against input value\n    //         this.parentElement.appendChild(this);   // help with layering??? (so it draws last and is on top?)\n    //         return 'red';\n    //     } else {\n    //         return '#999';\n    //     };\n    // }\n\n    // // Set the initial state (when map loads, initial state is set to January)\n    // function initialDate(data, i) {\n    //     let d = new Date(data.properties.OPEN_DT);\n    //     let m = month[d.getMonth()];\n    //     if (m === \"January\") {\n    //         this.parentElement.appendChild(this);\n    //         return 'red';\n    //     } else {\n    //         return '#999';\n    //     };\n    // }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/geomap.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _geomap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geomap */ \"./src/geomap.js\");\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n    // global vars for storing input values of slider\n    var inputValue = null;\n    var year = [\n        \"2006\", \"2007\", \"2008\", \n        \"2009\", \"2010\", \"2011\", \n        \"2012\", \"2013\", \"2014\", \n        \"2015\", \"2016\", \"2017\", \n        \"2018\", \"2019\"\n    ];\n\n    d3.select(\"#timeslide\").on(\"input\", function() {\n        document.getElementById(\"range\").innerHTML = year[this.value];\n        // d3.select(\"svg\").remove();  // this takes too long to re-render\n        // renderGeoMap(`${year[this.value]}`);\n        Object(_geomap__WEBPACK_IMPORTED_MODULE_0__[\"colorGeoMap\"])(`${year[this.value]}`);\n        // colorGeo\n    });\n    Object(_geomap__WEBPACK_IMPORTED_MODULE_0__[\"renderGeoMap\"])(`2006`);   // could invoke w/o arg (fct is defined w/ default param)\n    // colorGeoMap(\"2006\");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQXFEOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQztBQUNyQywyQkFBMkIsaUJBQWlCO0FBQzVDLFFBQVEsMkRBQVcsSUFBSSxpQkFBaUI7QUFDeEM7QUFDQSxLQUFLO0FBQ0wsSUFBSSw0REFBWSxTQUFTO0FBQ3pCO0FBQ0EsQ0FBQyIsImZpbGUiOiIuL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlckdlb01hcCwgY29sb3JHZW9NYXAgfSBmcm9tICcuL2dlb21hcCc7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcblxuICAgIC8vIGdsb2JhbCB2YXJzIGZvciBzdG9yaW5nIGlucHV0IHZhbHVlcyBvZiBzbGlkZXJcbiAgICB2YXIgaW5wdXRWYWx1ZSA9IG51bGw7XG4gICAgdmFyIHllYXIgPSBbXG4gICAgICAgIFwiMjAwNlwiLCBcIjIwMDdcIiwgXCIyMDA4XCIsIFxuICAgICAgICBcIjIwMDlcIiwgXCIyMDEwXCIsIFwiMjAxMVwiLCBcbiAgICAgICAgXCIyMDEyXCIsIFwiMjAxM1wiLCBcIjIwMTRcIiwgXG4gICAgICAgIFwiMjAxNVwiLCBcIjIwMTZcIiwgXCIyMDE3XCIsIFxuICAgICAgICBcIjIwMThcIiwgXCIyMDE5XCJcbiAgICBdO1xuXG4gICAgZDMuc2VsZWN0KFwiI3RpbWVzbGlkZVwiKS5vbihcImlucHV0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJhbmdlXCIpLmlubmVySFRNTCA9IHllYXJbdGhpcy52YWx1ZV07XG4gICAgICAgIC8vIGQzLnNlbGVjdChcInN2Z1wiKS5yZW1vdmUoKTsgIC8vIHRoaXMgdGFrZXMgdG9vIGxvbmcgdG8gcmUtcmVuZGVyXG4gICAgICAgIC8vIHJlbmRlckdlb01hcChgJHt5ZWFyW3RoaXMudmFsdWVdfWApO1xuICAgICAgICBjb2xvckdlb01hcChgJHt5ZWFyW3RoaXMudmFsdWVdfWApO1xuICAgICAgICAvLyBjb2xvckdlb1xuICAgIH0pO1xuICAgIHJlbmRlckdlb01hcChgMjAwNmApOyAgIC8vIGNvdWxkIGludm9rZSB3L28gYXJnIChmY3QgaXMgZGVmaW5lZCB3LyBkZWZhdWx0IHBhcmFtKVxuICAgIC8vIGNvbG9yR2VvTWFwKFwiMjAwNlwiKTtcbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ });